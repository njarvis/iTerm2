// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-macos10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BetterFontPicker
@_exported import BetterFontPicker
import Cocoa
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(BFPSizePickerViewDelegate) public protocol SizePickerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func sizePickerView(_ sizePickerView: BetterFontPicker.SizePickerView, didChangeSizeTo size: Swift.Double)
}
@_inheritsConvenienceInitializers @objc(BFPSizePickerView) @_Concurrency.MainActor(unsafe) public class SizePickerView : AppKit.NSView, AppKit.NSTextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any BetterFontPicker.SizePickerViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var size: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var fittingSize: Foundation.NSSize {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let textField: AppKit.NSTextField
  @objc @_Concurrency.MainActor(unsafe) public func clamp(min: Swift.Int, max: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resizeSubviews(withOldSize oldSize: Foundation.NSSize)
  @objc(stepper:) @_Concurrency.MainActor(unsafe) public func stepper(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc public func controlTextDidEndEditing(_ obj: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) @objc public func controlTextDidChange(_ obj: Foundation.Notification)
  @objc deinit
}
@objc(BFPFontListDataSource) public protocol FontListDataSource : ObjectiveC.NSObjectProtocol {
  @objc var isSeparator: Swift.Bool { get }
  @objc var names: [Swift.String] { get }
  @objc var filter: Swift.String { get set }
  @objc func reload()
}
@_inheritsConvenienceInitializers @objc(BFPFontListTableView) @_Concurrency.MainActor(unsafe) public class FontListTableView : AppKit.NSTableView {
  @objc(keyDown:) @_Concurrency.MainActor(unsafe) override dynamic public func keyDown(with event: AppKit.NSEvent)
  @objc(mouseDown:) @_Concurrency.MainActor(unsafe) override dynamic public func mouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(BFPAffordanceDelegate) public protocol AffordanceDelegate {
  @objc func affordance(_ affordance: BetterFontPicker.Affordance, didSelectFontFamily fontFamily: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BFPAffordance) @_Concurrency.MainActor(unsafe) public class Affordance : AppKit.NSPopUpButton, BetterFontPicker.MainViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any BetterFontPicker.AffordanceDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var familyName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak public var memberPicker: BetterFontPicker.FontFamilyMemberPickerView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var title: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame buttonFrame: Foundation.NSRect, pullsDown flag: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willOpenMenu(_ menu: AppKit.NSMenu, with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc public func mainViewController(_ mainViewController: BetterFontPicker.MainViewController, didSelectFontWithName name: Swift.String)
}
@_hasMissingDesignatedInitializers @objc(BFPTableViewController) @_Concurrency.MainActor(unsafe) public class TableViewController : AppKit.NSViewController, AppKit.NSTableViewDataSource, AppKit.NSTableViewDelegate {
  @objc(viewDidLayout) @_Concurrency.MainActor(unsafe) override dynamic public func viewDidLayout()
  @objc(numberOfRowsInTableView:) @_Concurrency.MainActor(unsafe) public func numberOfRows(in tableView: AppKit.NSTableView) -> Swift.Int
  @objc(tableView:rowViewForRow:) @_Concurrency.MainActor(unsafe) public func tableView(_ tableView: AppKit.NSTableView, rowViewForRow row: Swift.Int) -> AppKit.NSTableRowView?
  @objc(tableView:viewForTableColumn:row:) @_Concurrency.MainActor(unsafe) public func tableView(_ tableView: AppKit.NSTableView, viewFor tableColumn: AppKit.NSTableColumn?, row: Swift.Int) -> AppKit.NSView?
  @objc(tableView:heightOfRow:) @_Concurrency.MainActor(unsafe) public func tableView(_ tableView: AppKit.NSTableView, heightOfRow row: Swift.Int) -> CoreFoundation.CGFloat
  @objc(tableView:shouldSelectRow:) @_Concurrency.MainActor(unsafe) public func tableView(_ tableView: AppKit.NSTableView, shouldSelectRow row: Swift.Int) -> Swift.Bool
  @objc(tableViewSelectionDidChange:) @_Concurrency.MainActor(unsafe) public func tableViewSelectionDidChange(_ notification: Foundation.Notification)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FontPickerPanel : AppKit.NSPanel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var canBecomeKey: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func cancelOperation(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignKey()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(contentRect: Foundation.NSRect, styleMask style: AppKit.NSWindow.StyleMask, backing backingStoreType: AppKit.NSWindow.BackingStoreType, defer flag: Swift.Bool)
  @objc deinit
}
@objc(BFPCompositeViewDelegate) public protocol FontPickerCompositeViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func fontPickerCompositeView(_ view: BetterFontPicker.FontPickerCompositeView, didSelectFont font: AppKit.NSFont)
}
@_inheritsConvenienceInitializers @objc(BFPCompositeView) @_Concurrency.MainActor(unsafe) public class FontPickerCompositeView : AppKit.NSView, BetterFontPicker.AffordanceDelegate, BetterFontPicker.FontFamilyMemberPickerViewDelegate, BetterFontPicker.SizePickerViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any BetterFontPicker.FontPickerCompositeViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let affordance: BetterFontPicker.Affordance
  @objc @_Concurrency.MainActor(unsafe) public var horizontalSpacing: BetterFontPicker.SizePickerView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var verticalSpacing: BetterFontPicker.SizePickerView? {
    get
  }
  @objc(BFPCompositeViewMode) public enum Mode : Swift.Int {
    case normal
    case fixedPitch
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) public var mode: BetterFontPicker.FontPickerCompositeView.Mode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var font: AppKit.NSFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(font: AppKit.NSFont)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resizeSubviews(withOldSize oldSize: Foundation.NSSize)
  @objc @_Concurrency.MainActor(unsafe) public func removeSizePicker()
  @objc @_Concurrency.MainActor(unsafe) public func removeMemberPicker()
  @objc @_Concurrency.MainActor(unsafe) public func removeOptionsButton()
  @objc(addHorizontalSpacingAccessoryWithInitialValue:) @_Concurrency.MainActor(unsafe) public func addHorizontalSpacingAccessory(_ initialValue: Swift.Double) -> BetterFontPicker.SizePickerView
  @objc(addVerticalSpacingAccessoryWithInitialValue:) @_Concurrency.MainActor(unsafe) public func addVerticalSpacingAccessory(_ initialValue: Swift.Double) -> BetterFontPicker.SizePickerView
  @_Concurrency.MainActor(unsafe) public func add(accessory view: AppKit.NSView)
  @_Concurrency.MainActor(unsafe) @objc public func affordance(_ affordance: BetterFontPicker.Affordance, didSelectFontFamily fontFamily: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func fontFamilyMemberPickerView(_ fontFamilyMemberPickerView: BetterFontPicker.FontFamilyMemberPickerView, didSelectFontName name: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func sizePickerView(_ sizePickerView: BetterFontPicker.SizePickerView, didChangeSizeTo size: Swift.Double)
  @objc deinit
}
@objc(BFPFontFamilyMemberPickerViewDelegate) public protocol FontFamilyMemberPickerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func fontFamilyMemberPickerView(_ fontFamilyMemberPickerView: BetterFontPicker.FontFamilyMemberPickerView, didSelectFontName name: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BFPFontFamilyMemberPickerView) @_Concurrency.MainActor(unsafe) public class FontFamilyMemberPickerView : AppKit.NSPopUpButton {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any BetterFontPicker.FontFamilyMemberPickerViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame buttonFrame: Foundation.NSRect, pullsDown flag: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func didChange(_ sender: Any?)
  @objc deinit
}
@objc(BFPMainViewControllerDelegate) public protocol MainViewControllerDelegate {
  @objc func mainViewController(_ mainViewController: BetterFontPicker.MainViewController, didSelectFontWithName name: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BFPMainViewController) @_Concurrency.MainActor(unsafe) public class MainViewController : AppKit.NSViewController, AppKit.NSTextFieldDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var tableView: BetterFontPicker.FontListTableView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var searchField: AppKit.NSSearchField!
  @objc(delegate) @IBOutlet @_Concurrency.MainActor(unsafe) weak public var delegate: (any BetterFontPicker.MainViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var systemFontDataSources: [any BetterFontPicker.FontListDataSource] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var fontFamilyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insets: Foundation.NSEdgeInsets {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tableViewController: BetterFontPicker.TableViewController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc(controlTextDidChange:) @_Concurrency.MainActor(unsafe) public func controlTextDidChange(_ obj: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear()
  @objc deinit
}
extension BetterFontPicker.FontPickerCompositeView.Mode : Swift.Equatable {}
extension BetterFontPicker.FontPickerCompositeView.Mode : Swift.Hashable {}
extension BetterFontPicker.FontPickerCompositeView.Mode : Swift.RawRepresentable {}
