// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-macos10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SearchableComboListView
import AppKit
import Foundation
@_exported import SearchableComboListView
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(iTermSearchableComboViewDelegate) public protocol SearchableComboViewDelegate {
  @objc func searchableComboView(_ view: SearchableComboListView.SearchableComboView, didSelectItem: SearchableComboListView.SearchableComboViewItem?)
}
@objc(iTermSearchableComboViewGroup) public class SearchableComboViewGroup : ObjectiveC.NSObject {
  @objc(initWithLabel:items:) public init(_ label: Swift.String, items: [SearchableComboListView.SearchableComboViewItem])
  @objc deinit
}
@objc(iTermSearchableComboViewItem) public class SearchableComboViewItem : ObjectiveC.NSObject {
  final public let label: Swift.String
  final public let tag: Swift.Int
  final public let identifier: Swift.String?
  final public let labelTokens: [Swift.String]
  weak public var group: SearchableComboListView.SearchableComboViewGroup? {
    get
  }
  @objc(initWithLabel:tag:) public init(_ label: Swift.String, tag: Swift.Int)
  @objc(initWithLabel:tag:identifier:) public init(_ label: Swift.String, tag: Swift.Int, identifier: Swift.String?)
  @objc deinit
}
@objc(iTermSearchableComboView) @_Concurrency.MainActor(unsafe) open class SearchableComboView : AppKit.NSPopUpButton {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class Panel : AppKit.NSPanel {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public var canBecomeKey: Swift.Bool {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func animationResizeTime(_ newFrame: Foundation.NSRect) -> Foundation.TimeInterval
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func cancelOperation(_ sender: Any?)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignKey()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(contentRect: Foundation.NSRect, styleMask style: AppKit.NSWindow.StyleMask, backing backingStoreType: AppKit.NSWindow.BackingStoreType, defer flag: Swift.Bool)
    @objc deinit
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any SearchableComboListView.SearchableComboViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open class func groups() -> [SearchableComboListView.SearchableComboViewGroup]
  @_Concurrency.MainActor(unsafe) open class func defaultTitleValue() -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc(initWithGroups:defaultTitle:) @_Concurrency.MainActor(unsafe) public init(_ groups: [SearchableComboListView.SearchableComboViewGroup], defaultTitle: Swift.String)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func selectItem(withTag tag: Swift.Int) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func selectItem(withIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectItem(withTitle title: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func selectedTag() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willOpenMenu(_ menu: AppKit.NSMenu, with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var selectedItem: AppKit.NSMenuItem? {
    @objc get
  }
}
